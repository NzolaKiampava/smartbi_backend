export declare const dataQueryTypeDefs = "#graphql\n  enum ConnectionType {\n    MYSQL\n    POSTGRESQL\n    SUPABASE\n    FIREBASE\n    API_REST\n    API_GRAPHQL\n  }\n\n  enum ConnectionStatus {\n    ACTIVE\n    INACTIVE\n    ERROR\n  }\n\n  type DataConnection {\n    id: ID!\n    companyId: ID!\n    name: String!\n    type: ConnectionType!\n    status: ConnectionStatus!\n    config: DataConnectionConfig!\n    isDefault: Boolean!\n    createdAt: String!\n    updatedAt: String!\n    lastTestedAt: String\n  }\n\n  type DataConnectionConfig {\n    host: String\n    port: Int\n    database: String\n    username: String\n    # password is never returned in queries\n    apiUrl: String\n    apiKey: String\n    headers: [KeyValuePair!]\n    timeout: Int\n  }\n\n  type KeyValuePair {\n    key: String!\n    value: String!\n  }\n\n  input DataConnectionInput {\n    name: String!\n    type: ConnectionType!\n    config: DataConnectionConfigInput!\n    isDefault: Boolean\n  }\n\n  input DataConnectionConfigInput {\n    host: String\n    port: Int\n    database: String\n    username: String\n    password: String\n    apiUrl: String\n    apiKey: String\n    headers: [KeyValuePairInput!]\n    timeout: Int\n  }\n\n  input KeyValuePairInput {\n    key: String!\n    value: String!\n  }\n\n  input ConnectionTestInput {\n    type: ConnectionType!\n    host: String\n    port: Int\n    database: String\n    username: String\n    password: String\n    apiUrl: String\n    apiKey: String\n  }\n\n  type AIQueryResult {\n    id: ID!\n    companyId: ID!\n    connectionId: ID!\n    naturalQuery: String!\n    generatedQuery: String!\n    results: [QueryResultRow!]!\n    executionTime: Float!\n    status: QueryStatus!\n    error: String\n    createdAt: String!\n  }\n\n  enum QueryStatus {\n    SUCCESS\n    ERROR\n    TIMEOUT\n  }\n\n  type QueryResultRow {\n    data: JSON!\n  }\n\n  type DeleteResult {\n    deletedCount: Int!\n    errors: [String!]!\n  }\n\n  type ClearHistoryResult {\n    deletedCount: Int!\n    message: String!\n  }\n\n  type SchemaInfo {\n    tables: [TableInfo!]!\n    totalTables: Int!\n  }\n\n  type TableInfo {\n    name: String!\n    columns: [ColumnInfo!]!\n  }\n\n  type ColumnInfo {\n    name: String!\n    type: String!\n    nullable: Boolean!\n    defaultValue: String\n  }\n\n  input AIQueryInput {\n    connectionId: ID!\n    naturalQuery: String!\n  }\n\n  type Query {\n    # Data Connections\n    getDataConnections: [DataConnection!]!\n    getDataConnection(id: ID!): DataConnection\n    testDataConnection(id: ID!): ConnectionTestResult!\n    \n    # Get connections without authentication (development only)\n    getDataConnectionsPublic: [DataConnection!]!\n    getSchemaInfo(connectionId: ID!): SchemaInfo!\n    \n    # AI Queries\n    getAIQueryHistory: [AIQueryResult!]!\n    getAIQuery(id: ID!): AIQueryResult\n    \n    # AI Queries without authentication (development only)\n    getAIQueryHistoryPublic(limit: Int): [AIQueryResult!]!\n    getAIQueryPublic(id: ID!): AIQueryResult\n  }\n\n  type Mutation {\n    # Data Connections Management\n    createDataConnection(input: DataConnectionInput!): DataConnection!\n    updateDataConnection(id: ID!, input: DataConnectionInput!): DataConnection!\n    deleteDataConnection(id: ID!): Boolean!\n    testConnection(input: DataConnectionInput!): ConnectionTestResult!\n    \n    # Testing without authentication (development only)\n    testConnectionPublic(input: ConnectionTestInput!): ConnectionTestResult!\n    \n    # Create connection without authentication (development only)\n    createDataConnectionPublic(input: DataConnectionInput!): DataConnection!\n  # Delete connection without authentication (development only)\n  deleteDataConnectionPublic(id: ID!): Boolean!\n    \n    # AI Query Execution\n    executeAIQuery(input: AIQueryInput!): AIQueryResult!\n    \n    # Execute AI query without authentication (development only)\n    executeAIQueryPublic(input: AIQueryInput!): AIQueryResult!\n    \n    # Delete AI queries without authentication (development only)\n    deleteAIQueryPublic(id: ID!): Boolean!\n    deleteMultipleAIQueriesPublic(ids: [ID!]!): DeleteResult!\n    clearAIQueryHistoryPublic: ClearHistoryResult!\n  }\n\n  type ConnectionTestResult {\n    success: Boolean!\n    message: String!\n    latency: Float\n    schemaPreview: SchemaInfo\n  }\n\n  scalar JSON\n";
//# sourceMappingURL=data-query.schema.d.ts.map