export declare const authTypeDefs = "#graphql\n  enum UserRole {\n    SUPER_ADMIN\n    COMPANY_ADMIN\n    MANAGER\n    ANALYST\n    VIEWER\n  }\n\n  enum SubscriptionTier {\n    FREE\n    BASIC\n    PROFESSIONAL\n    ENTERPRISE\n  }\n\n  type User {\n    id: ID!\n    email: String!\n    firstName: String!\n    lastName: String!\n    role: UserRole!\n    companyId: ID!\n    isActive: Boolean!\n    emailVerified: Boolean!\n    lastLoginAt: String\n    createdAt: String!\n    updatedAt: String!\n  }\n\n  type Company {\n    id: ID!\n    name: String!\n    slug: String!\n    domain: String\n    isActive: Boolean!\n    subscriptionTier: SubscriptionTier!\n    maxUsers: Int!\n    createdAt: String!\n    updatedAt: String!\n  }\n\n  type AuthTokens {\n    accessToken: String!\n    refreshToken: String!\n    expiresIn: Int!\n  }\n\n  type AuthPayload {\n    user: User!\n    company: Company!\n    tokens: AuthTokens!\n  }\n\n  type MePayload {\n    user: User!\n    company: Company!\n  }\n\n  type TokenPayload {\n    tokens: AuthTokens!\n  }\n\n  input LoginInput {\n    email: String!\n    password: String!\n    companySlug: String\n  }\n\n  input RegisterInput {\n    email: String!\n    password: String!\n    firstName: String!\n    lastName: String!\n    companyName: String!\n    companySlug: String!\n  }\n\n  input RefreshTokenInput {\n    refreshToken: String!\n  }\n\n  type AuthResponse {\n    success: Boolean!\n    data: AuthPayload\n    message: String\n    errors: [String!]\n  }\n\n  type TokenResponse {\n    success: Boolean!\n    data: TokenPayload\n    message: String\n    errors: [String!]\n  }\n\n  type LogoutResponse {\n    success: Boolean!\n    message: String\n  }\n\n  extend type Query {\n    me: MePayload\n  }\n\n  extend type Mutation {\n    login(input: LoginInput!): AuthResponse!\n    register(input: RegisterInput!): AuthResponse!\n    refreshToken(input: RefreshTokenInput!): TokenResponse!\n    logout: LogoutResponse!\n  }\n";
//# sourceMappingURL=auth.schema.d.ts.map