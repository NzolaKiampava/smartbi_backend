{
	"info": {
		"name": "SmartBI - Quick Connection Test",
		"description": "Collection r√°pida para testar conex√µes com bancos externos",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [{"key": "token", "value": "{{auth_token}}", "type": "string"}]
	},
	"variable": [
		{"key": "baseUrl", "value": "http://localhost:4000/graphql", "type": "string"},
		{"key": "auth_token", "value": "", "type": "string"}
	],
	"item": [
		{
			"name": "üîê Quick Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    if (response.data?.login?.token) {",
							"        pm.collectionVariables.set('auth_token', response.data.login.token);",
							"        console.log('‚úÖ Login successful, token saved');",
							"    }",
							"} else {",
							"    console.log('‚ùå Login failed');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [{"key": "Content-Type", "value": "application/json"}],
				"body": {
					"mode": "raw",
					"raw": "{\"query\":\"mutation{login(email:\\\"{{test_email}}\\\",password:\\\"{{test_password}}\\\"){token user{id email firstName lastName}}}\",\"variables\":{}}"
				},
				"url": {"raw": "{{baseUrl}}", "host": ["{{baseUrl}}"]}
			}
		},
		{
			"name": "üê¨ Test MySQL Connection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"if (response.data?.testConnection?.success) {",
							"    console.log('‚úÖ MySQL connection successful');",
							"    console.log('‚è±Ô∏è Latency:', response.data.testConnection.latency + 'ms');",
							"    if (response.data.testConnection.schemaPreview) {",
							"        console.log('üìä Tables found:', response.data.testConnection.schemaPreview.totalTables);",
							"    }",
							"} else {",
							"    console.log('‚ùå MySQL connection failed:', response.data?.testConnection?.message);",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [{"key": "Content-Type", "value": "application/json"}],
				"body": {
					"mode": "raw",
					"raw": "{\"query\":\"mutation TestConnection($input:DataConnectionInput!){testConnection(input:$input){success message latency schemaPreview{totalTables tables{name}}}}\",\"variables\":{\"input\":{\"name\":\"Quick MySQL Test\",\"type\":\"MYSQL\",\"config\":{\"host\":\"{{mysql_host}}\",\"port\":{{mysql_port}},\"database\":\"{{mysql_database}}\",\"username\":\"{{mysql_username}}\",\"password\":\"{{mysql_password}}\"}}}}"
				},
				"url": {"raw": "{{baseUrl}}", "host": ["{{baseUrl}}"]}
			}
		},
		{
			"name": "üêò Test PostgreSQL Connection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"if (response.data?.testConnection?.success) {",
							"    console.log('‚úÖ PostgreSQL connection successful');",
							"    console.log('‚è±Ô∏è Latency:', response.data.testConnection.latency + 'ms');",
							"    if (response.data.testConnection.schemaPreview) {",
							"        console.log('üìä Tables found:', response.data.testConnection.schemaPreview.totalTables);",
							"    }",
							"} else {",
							"    console.log('‚ùå PostgreSQL connection failed:', response.data?.testConnection?.message);",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [{"key": "Content-Type", "value": "application/json"}],
				"body": {
					"mode": "raw",
					"raw": "{\"query\":\"mutation TestConnection($input:DataConnectionInput!){testConnection(input:$input){success message latency schemaPreview{totalTables tables{name}}}}\",\"variables\":{\"input\":{\"name\":\"Quick PostgreSQL Test\",\"type\":\"POSTGRESQL\",\"config\":{\"host\":\"{{postgres_host}}\",\"port\":{{postgres_port}},\"database\":\"{{postgres_database}}\",\"username\":\"{{postgres_username}}\",\"password\":\"{{postgres_password}}\"}}}}"
				},
				"url": {"raw": "{{baseUrl}}", "host": ["{{baseUrl}}"]}
			}
		},
		{
			"name": "üåê Test API Connection",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"if (response.data?.testConnection?.success) {",
							"    console.log('‚úÖ API connection successful');",
							"    console.log('‚è±Ô∏è Latency:', response.data.testConnection.latency + 'ms');",
							"} else {",
							"    console.log('‚ùå API connection failed:', response.data?.testConnection?.message);",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [{"key": "Content-Type", "value": "application/json"}],
				"body": {
					"mode": "raw",
					"raw": "{\"query\":\"mutation TestConnection($input:DataConnectionInput!){testConnection(input:$input){success message latency}}\",\"variables\":{\"input\":{\"name\":\"Quick API Test\",\"type\":\"API_REST\",\"config\":{\"apiUrl\":\"{{api_base_url}}\",\"apiKey\":\"{{api_key}}\",\"headers\":[{\"key\":\"Content-Type\",\"value\":\"application/json\"}]}}}}"
				},
				"url": {"raw": "{{baseUrl}}", "host": ["{{baseUrl}}"]}
			}
		},
		{
			"name": "üß† Quick AI Query Test",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Primeiro precisa ter uma conex√£o criada",
							"if (!pm.collectionVariables.get('connection_id')) {",
							"    console.log('‚ö†Ô∏è Voc√™ precisa criar uma conex√£o primeiro!');",
							"}"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();",
							"if (response.data?.executeAIQuery?.status === 'SUCCESS') {",
							"    console.log('‚úÖ AI Query successful');",
							"    console.log('ü§ñ Generated SQL:', response.data.executeAIQuery.generatedQuery);",
							"    console.log('‚è±Ô∏è Execution time:', response.data.executeAIQuery.executionTime + 'ms');",
							"    console.log('üìä Results:', JSON.stringify(response.data.executeAIQuery.results, null, 2));",
							"} else {",
							"    console.log('‚ùå AI Query failed:', response.data?.executeAIQuery?.error);",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [{"key": "Content-Type", "value": "application/json"}],
				"body": {
					"mode": "raw",
					"raw": "{\"query\":\"mutation ExecuteAIQuery($input:AIQueryInput!){executeAIQuery(input:$input){id naturalQuery generatedQuery results{data}executionTime status error}}\",\"variables\":{\"input\":{\"connectionId\":\"{{connection_id}}\",\"naturalQuery\":\"Quantos registros existem na primeira tabela?\"}}}"
				},
				"url": {"raw": "{{baseUrl}}", "host": ["{{baseUrl}}"]}
			}
		}
	]
}