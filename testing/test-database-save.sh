#!/bin/bash
# Test database save functionality for Firebase connections

echo "üî• Testing Firebase Database Save"
echo "================================="

# First check if server is running
echo "üì° Checking if server is running..."
curl -s -o /dev/null -w "%{http_code}" http://localhost:4000/graphql

if [ $? -ne 0 ]; then
    echo "‚ùå Server is not running on http://localhost:4000"
    echo "Please start the server with: npm run dev"
    exit 1
fi

echo "‚úÖ Server is running"
echo ""

# Test 1: Create Firebase Connection
echo "üß™ Test 1: Creating Firebase connection..."
response1=$(curl -s -X POST http://localhost:4000/graphql \
  -H "Content-Type: application/json" \
  -d '{
    "query": "mutation CreateFirebaseConnection { createDataConnectionPublic(input: { type: FIREBASE, name: \"Test Firebase Save\", description: \"Testing database save\", config: { apiUrl: \"kimakudi-db\", apiKey: \"AIzaSyDARAd1d_mt6ebQx4yz0SF41dLKPaNWuf8\" } }) { id name type status description config { apiUrl } createdAt } }"
  }')

echo "Response: $response1"
echo ""

# Extract connection ID if successful
connection_id=$(echo $response1 | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)

if [ -n "$connection_id" ]; then
    echo "‚úÖ Firebase connection created with ID: $connection_id"
else
    echo "‚ùå Failed to create Firebase connection"
    echo "Check the response above for errors"
    
    # Check if it's an enum error
    if echo $response1 | grep -q "invalid input value for enum"; then
        echo ""
        echo "üîç DIAGNOSIS: Database enum needs to be updated!"
        echo "Please run this SQL in your Supabase dashboard:"
        echo "ALTER TYPE connection_type ADD VALUE 'FIREBASE';"
        echo "ALTER TYPE connection_type ADD VALUE 'MONGODB';"
    fi
    exit 1
fi

echo ""

# Test 2: Verify connection exists in database
echo "üß™ Test 2: Verifying connection exists in database..."
response2=$(curl -s -X POST http://localhost:4000/graphql \
  -H "Content-Type: application/json" \
  -d '{
    "query": "query ListConnections { getDataConnectionsPublic { id name type status description createdAt } }"
  }')

echo "Response: $response2"
echo ""

# Check if our connection appears in the list
if echo $response2 | grep -q "$connection_id"; then
    echo "‚úÖ Connection successfully saved and retrieved from database!"
else
    echo "‚ùå Connection not found in database list"
fi

echo ""

# Test 3: Test MongoDB connection save
echo "üß™ Test 3: Testing MongoDB connection save..."
response3=$(curl -s -X POST http://localhost:4000/graphql \
  -H "Content-Type: application/json" \
  -d '{
    "query": "mutation CreateMongoConnection { createDataConnectionPublic(input: { type: MONGODB, name: \"Test MongoDB Save\", description: \"Testing MongoDB save\", config: { connectionString: \"mongodb://localhost:27017/testdb\" } }) { id name type status description createdAt } }"
  }')

echo "Response: $response3"
echo ""

if echo $response3 | grep -q '"id"'; then
    echo "‚úÖ MongoDB connection also saves successfully!"
else
    echo "‚ùå MongoDB connection failed to save"
    if echo $response3 | grep -q "invalid input value for enum"; then
        echo "Need to add MONGODB to database enum as well"
    fi
fi

echo ""
echo "üéâ Database save testing completed!"
echo "If you see ‚úÖ messages above, the database save is working correctly."
echo "If you see ‚ùå messages, check the error details and database enum configuration."